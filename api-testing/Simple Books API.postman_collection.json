{
  "info": {
    "_postman_id": "657209a2-46d0-489d-9220-57c0a1f33961",
    "name": "Simple Books API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "25636792"
  },
  "item": [
    {
      "name": "API Status",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "",
              "pm.test('Status should be OK', () => {",
              "    pm.expect(response.status).to.eql('OK');",
              "});",
              "",
              "pm.execution.setNextRequest('List of books');"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/status",
          "host": ["{{baseUrl}}"],
          "path": ["status"]
        }
      },
      "response": []
    },
    {
      "name": "List of books",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const response = pm.response.json();",
              "const nonFictionBooks = response.filter(book => book.available === true);",
              "",
              "const book = nonFictionBooks[0];",
              "if (book) {",
              "    pm.globals.set('bookId', book.id);",
              "}",
              "",
              "pm.test('Book found', () => {",
              "    pm.expect(book).to.be.an('object');",
              "    pm.expect(book.available).to.be.true;",
              "    pm.expect(book.type).to.eql('non-fiction');",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/books?type=non-fiction",
          "host": ["{{baseUrl}}"],
          "path": ["books"],
          "query": [
            {
              "key": "type",
              "value": "non-fiction"
            },
            {
              "key": "limit",
              "value": "20",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get a single book",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', () => {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "const book = pm.response.json();",
              "",
              "pm.test('Is in stock', () => {",
              "    pm.expect(book['current-stock']).to.be.above(0);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/books/:bookId",
          "host": ["{{baseUrl}}"],
          "path": ["books", ":bookId"],
          "variable": [
            {
              "key": "bookId",
              "value": "{{bookId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Submit an order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", () => {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "const createdOrder = pm.response.json();",
              "if (createdOrder) {",
              "    pm.globals.set('orderId', createdOrder.orderId);",
              "}",
              "",
              "pm.test('Order created successfully', () => {",
              "    pm.expect(createdOrder).to.be.an('object');",
              "})"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"bookId\": {{bookId}},\n    \"customerName\": \"{{$randomFullName}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get all orders",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", () => {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Get an order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", () => {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Update an order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", () => {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"customerName\": \"John\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Delete an order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204\", () => {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "pm.execution.setNextRequest(null);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Register API Client",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", () => {",
              "    pm.response.to.have.status(201);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n   \"clientName\": \"Postman\",\n   \"clientEmail\": \"vuong.vo@example.com\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/api-clients",
          "host": ["{{baseUrl}}"],
          "path": ["api-clients"]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://simple-books-api.glitch.me",
      "type": "default"
    },
    {
      "key": "accessToken",
      "value": "d5ab1672a3c4a635879ec077bef8fe66508442a62a82a125a7649d2211fab204",
      "type": "string"
    }
  ]
}
