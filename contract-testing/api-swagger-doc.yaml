openapi: 3.0.0
info:
  title: Simple Books API
  description: This API allows you to reserve a book and manage your orders. Authentication is required for order operations. Register an API client to get an access token.
  version: 1.0.0
servers:
  - url: https://simple-books-api.glitch.me
    description: Main production server

tags:
  - name: Status
    description: API Health Check
  - name: Books
    description: Operations related to books
  - name: Orders
    description: Operations related to book orders (Requires Authentication)
  - name: Authentication
    description: API Client Registration

paths:
  /status:
    get:
      tags:
        - Status
      summary: Get API Status
      description: Returns the current status of the API.
      operationId: getApiStatus
      responses:
        "200":
          description: API is operational.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK

  /books:
    get:
      tags:
        - Books
      summary: List Books
      description: Returns a list of available books. Can be filtered by type and limited in number.
      operationId: listBooks
      parameters:
        - name: type
          in: query
          description: Filter books by type (fiction or non-fiction).
          required: false
          schema:
            type: string
            enum: [fiction, non-fiction]
        - name: limit
          in: query
          description: Limit the number of results (1 to 20).
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
      responses:
        "200":
          description: A list of books.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "400":
          description: Invalid query parameter value (e.g., limit out of range).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /books/{bookId}:
    get:
      tags:
        - Books
      summary: Get Single Book
      description: Retrieve detailed information about a specific book using its ID.
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: The ID of the book to retrieve.
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Detailed information about the book.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDetail" # Assuming a more detailed schema than list view
        "404":
          description: Book with the specified ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders:
    post:
      tags:
        - Orders
      summary: Submit Order
      description: Place a new order for a book. Requires authentication.
      operationId: submitOrder
      security:
        - bearerAuth: []
      requestBody:
        description: Order details including the book ID and customer name.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
            example:
              bookId: 1
              customerName: "John Doe"
      responses:
        "201":
          description: Order successfully created. Returns the order ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCreatedResponse"
        "400":
          description: Invalid request body (e.g., missing required fields).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized. Authentication token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Book with the specified bookId not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    get:
      tags:
        - Orders
      summary: Get All Orders
      description: Retrieve a list of all orders placed by the authenticated client. Requires authentication.
      operationId: getAllOrders
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized. Authentication token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get Single Order
      description: Retrieve details of a specific order by its ID. Requires authentication.
      operationId: getOrderById
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to retrieve.
          required: true
          schema:
            type: string
            example: "PF6MflPDcuhWobZcgmJy5"
      responses:
        "200":
          description: Detailed information about the order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized. Authentication token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order with the specified ID not found or does not belong to the authenticated client.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      tags:
        - Orders
      summary: Update Order
      description: Update the customer name on an existing order. Requires authentication.
      operationId: updateOrder
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to update.
          required: true
          schema:
            type: string
            example: "PF6MflPDcuhWobZcgmJy5"
      requestBody:
        description: Customer name to update.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequest"
            example:
              customerName: "Johnathan Doe"
      responses:
        "204":
          description: Order successfully updated. No content returned.
        "400":
          description: Invalid request body (e.g., missing customerName).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized. Authentication token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order with the specified ID not found or does not belong to the authenticated client.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - Orders
      summary: Delete Order
      description: Delete an existing order. Requires authentication.
      operationId: deleteOrder
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to delete.
          required: true
          schema:
            type: string
            example: "PF6MflPDcuhWobZcgmJy5"
      responses:
        "204":
          description: Order successfully deleted. No content returned.
        "401":
          description: Unauthorized. Authentication token is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order with the specified ID not found or does not belong to the authenticated client.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api-clients:
    post:
      tags:
        - Authentication
      summary: Register API Client
      description: Register a new API client to obtain an access token (Bearer Token) required for accessing order endpoints. The token is valid for 7 days.
      operationId: registerApiClient
      requestBody:
        description: Client details for registration.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiClientRequest"
            example:
              clientName: "Postman"
              clientEmail: "valentin@example.com"
      responses:
        "201":
          description: API Client registered successfully. Returns the access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponse"
        "400":
          description: Invalid request body (e.g. missing fields or invalid email format).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict. API client with the specified email or name already registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  error: "API client already registered."

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the book.
          example: 1
        name:
          type: string
          description: The title of the book.
          example: "The Russian"
        type:
          type: string
          description: The genre type of the book.
          enum: [fiction, non-fiction]
          example: "fiction"
        available:
          type: boolean
          description: Indicates if the book is currently available for ordering.
          example: true

    BookDetail: # Potentially more fields than the list view
      allOf: # Inherits properties from Book
        - $ref: "#/components/schemas/Book"
        - type: object
          properties:
            author:
              type: string
              description: Author of the book (example field, not specified in original description).
              example: "Jane Doe"
            isbn:
              type: string
              description: ISBN of the book (example field).
              example: "978-3-16-148410-0"
            price:
              type: number
              format: float
              description: Price of the book (example field).
              example: 19.99
            "current-stock":
              type: integer
              description: Available stock count (example field).
              example: 150

    OrderRequest:
      type: object
      required:
        - bookId
        - customerName
      properties:
        bookId:
          type: integer
          description: The ID of the book being ordered.
          example: 1
        customerName:
          type: string
          description: The name of the customer placing the order.
          example: "John Doe"

    OrderCreatedResponse:
      type: object
      properties:
        created:
          type: boolean
          example: true
        orderId:
          type: string
          description: The unique identifier for the created order.
          example: "PF6MflPDcuhWobZcgmJy5"

    Order:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the order.
          example: "PF6MflPDcuhWobZcgmJy5"
        bookId:
          type: integer
          description: The ID of the book ordered.
          example: 1
        customerName:
          type: string
          description: The name of the customer who placed the order.
          example: "John Doe"
        createdBy:
          type: string
          description: ID of the client who created the order (example field).
          example: "yzG_im9uV8z1i_zpsM9a_APj"
        quantity:
          type: integer
          description: Quantity of the book ordered (example field, assuming 1).
          example: 1
        timestamp:
          type: integer
          format: int64
          description: Timestamp when the order was created (example field).
          example: 1678886400000

    UpdateOrderRequest:
      type: object
      required:
        - customerName
      properties:
        customerName:
          type: string
          description: The updated name for the customer.
          example: "Johnathan Doe"

    ApiClientRequest:
      type: object
      required:
        - clientName
        - clientEmail
      properties:
        clientName:
          type: string
          description: A unique name for the API client.
          example: "MyWebApp"
        clientEmail:
          type: string
          format: email
          description: A unique email address for the API client.
          example: "user@example.com"

    AccessTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: The Bearer token required for authenticated requests. Valid for 7 days.
          example: "fae7b9e0f1f5a3c1b6a8d3e5c7b9a2d4e6f8c0b2a4d6e8f0c3b5e7d9a1b3c5d7"

    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.
          example: "Invalid bookId."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Assuming JWT, although not specified
      description: "Bearer token obtained via `/api-clients` endpoint. Include in the Authorization header as `Authorization: Bearer <YOUR_TOKEN>`."
